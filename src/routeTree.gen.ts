/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SuppliersImport } from './routes/suppliers'
import { Route as RatingsImport } from './routes/ratings'
import { Route as ExtractionsImport } from './routes/extractions'
import { Route as BeansImport } from './routes/beans'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SuppliersRoute = SuppliersImport.update({
  id: '/suppliers',
  path: '/suppliers',
  getParentRoute: () => rootRoute,
} as any)

const RatingsRoute = RatingsImport.update({
  id: '/ratings',
  path: '/ratings',
  getParentRoute: () => rootRoute,
} as any)

const ExtractionsRoute = ExtractionsImport.update({
  id: '/extractions',
  path: '/extractions',
  getParentRoute: () => rootRoute,
} as any)

const BeansRoute = BeansImport.update({
  id: '/beans',
  path: '/beans',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/beans': {
      id: '/beans'
      path: '/beans'
      fullPath: '/beans'
      preLoaderRoute: typeof BeansImport
      parentRoute: typeof rootRoute
    }
    '/extractions': {
      id: '/extractions'
      path: '/extractions'
      fullPath: '/extractions'
      preLoaderRoute: typeof ExtractionsImport
      parentRoute: typeof rootRoute
    }
    '/ratings': {
      id: '/ratings'
      path: '/ratings'
      fullPath: '/ratings'
      preLoaderRoute: typeof RatingsImport
      parentRoute: typeof rootRoute
    }
    '/suppliers': {
      id: '/suppliers'
      path: '/suppliers'
      fullPath: '/suppliers'
      preLoaderRoute: typeof SuppliersImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/beans': typeof BeansRoute
  '/extractions': typeof ExtractionsRoute
  '/ratings': typeof RatingsRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/beans': typeof BeansRoute
  '/extractions': typeof ExtractionsRoute
  '/ratings': typeof RatingsRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/beans': typeof BeansRoute
  '/extractions': typeof ExtractionsRoute
  '/ratings': typeof RatingsRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/beans'
    | '/extractions'
    | '/ratings'
    | '/suppliers'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/beans' | '/extractions' | '/ratings' | '/suppliers'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/beans'
    | '/extractions'
    | '/ratings'
    | '/suppliers'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  BeansRoute: typeof BeansRoute
  ExtractionsRoute: typeof ExtractionsRoute
  RatingsRoute: typeof RatingsRoute
  SuppliersRoute: typeof SuppliersRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  BeansRoute: BeansRoute,
  ExtractionsRoute: ExtractionsRoute,
  RatingsRoute: RatingsRoute,
  SuppliersRoute: SuppliersRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/beans",
        "/extractions",
        "/ratings",
        "/suppliers"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/beans": {
      "filePath": "beans.tsx"
    },
    "/extractions": {
      "filePath": "extractions.tsx"
    },
    "/ratings": {
      "filePath": "ratings.tsx"
    },
    "/suppliers": {
      "filePath": "suppliers.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
